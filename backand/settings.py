import os
from pathlib import Path
from typing import Dict, Any
import asyncio
import time

try:
    from watchdog.observers import Observer
    from watchdog.events import FileSystemEventHandler

    WATCHDOG_AVAILABLE = True
except ImportError:
    WATCHDOG_AVAILABLE = False
    print("‚ö†Ô∏è Watchdog –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install watchdog")

# –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
BASE_DIR = Path(__file__).parent

# –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
ENV_FILE_PATH = BASE_DIR / '.env'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
_settings_cache = {}
_last_modified = 0
_settings_callbacks = []
_file_observer = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_SETTINGS = {
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    'SERVER_HOST': '0.0.0.0',
    'SERVER_PORT': '8000',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    'DATABASE_URL': 'postgresql://user:password@localhost:5432/cryptoscan',
    'DB_HOST': 'localhost',
    'DB_PORT': '5432',
    'DB_NAME': 'cryptoscan',
    'DB_USER': 'user',
    'DB_PASSWORD': 'password',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤
    'ANALYSIS_HOURS': '1',
    'OFFSET_MINUTES': '0',
    'VOLUME_MULTIPLIER': '2.0',
    'MIN_VOLUME_USDT': '1000',
    'CONSECUTIVE_LONG_COUNT': '5',
    'ALERT_GROUPING_MINUTES': '5',
    'DATA_RETENTION_HOURS': '2',
    'UPDATE_INTERVAL_SECONDS': '1',
    'PAIRS_CHECK_INTERVAL_MINUTES': '30',
    'PRICE_CHECK_INTERVAL_MINUTES': '5',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω
    'PRICE_HISTORY_DAYS': '30',
    'PRICE_DROP_PERCENTAGE': '10.0',
    'WATCHLIST_AUTO_UPDATE': 'True',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    'TELEGRAM_BOT_TOKEN': '',
    'TELEGRAM_CHAT_ID': '',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Bybit API
    'BYBIT_API_KEY': '',
    'BYBIT_API_SECRET': '',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    'LOG_LEVEL': 'INFO',
    'LOG_FILE': 'cryptoscan.log',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
    'WS_PING_INTERVAL': '20',
    'WS_PING_TIMEOUT': '10',
    'WS_CLOSE_TIMEOUT': '10',
    'WS_MAX_SIZE': '10000000',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    'TIME_SYNC_INTERVAL': '300',
    'TIME_SERVER_SYNC_INTERVAL': '3600',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–±–∞–ª–∞–Ω—Å–∞
    'MIN_GAP_PERCENTAGE': '0.1',
    'MIN_STRENGTH': '0.5',
    'FAIR_VALUE_GAP_ENABLED': 'True',
    'ORDER_BLOCK_ENABLED': 'True',
    'BREAKER_BLOCK_ENABLED': 'True',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–∫–∞–Ω–∞
    'ORDERBOOK_ENABLED': 'False',
    'ORDERBOOK_SNAPSHOT_ON_ALERT': 'False',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
    'VOLUME_ALERTS_ENABLED': 'True',
    'CONSECUTIVE_ALERTS_ENABLED': 'True',
    'PRIORITY_ALERTS_ENABLED': 'True',
    'IMBALANCE_ENABLED': 'True',
    'NOTIFICATION_ENABLED': 'True',
    'VOLUME_TYPE': 'long',

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    'SOCIAL_SENTIMENT_ENABLED': 'False',
    'SOCIAL_ANALYSIS_PERIOD_HOURS': '72',
    'SOCIAL_MIN_MENTIONS_FOR_RATING': '3',
    'SOCIAL_CACHE_DURATION_MINUTES': '30',
}


class SettingsFileHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""

    def on_modified(self, event):
        if event.is_directory:
            return

        if event.src_path == str(ENV_FILE_PATH):
            asyncio.create_task(reload_settings())


def create_env_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if ENV_FILE_PATH.exists():
        return

    with open(ENV_FILE_PATH, 'w', encoding='utf-8') as f:
        f.write("# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CryptoScan\n")
        f.write("# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.\n\n")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            '–°–µ—Ä–≤–µ—Ä': ['SERVER_HOST', 'SERVER_PORT'],
            '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö': ['DATABASE_URL', 'DB_HOST', 'DB_PORT', 'DB_NAME', 'DB_USER', 'DB_PASSWORD'],
            '–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤': ['ANALYSIS_HOURS', 'OFFSET_MINUTES', 'VOLUME_MULTIPLIER', 'MIN_VOLUME_USDT',
                               'CONSECUTIVE_LONG_COUNT', 'ALERT_GROUPING_MINUTES', 'DATA_RETENTION_HOURS',
                               'UPDATE_INTERVAL_SECONDS', 'PAIRS_CHECK_INTERVAL_MINUTES'],
            '–§–∏–ª—å—Ç—Ä —Ü–µ–Ω': ['PRICE_CHECK_INTERVAL_MINUTES', 'PRICE_HISTORY_DAYS', 'PRICE_DROP_PERCENTAGE'],
            'Watchlist': ['WATCHLIST_AUTO_UPDATE'],
            'Telegram': ['TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHAT_ID'],
            'Bybit API': ['BYBIT_API_KEY', 'BYBIT_API_SECRET'],
            '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ': ['LOG_LEVEL', 'LOG_FILE'],
            'WebSocket': ['WS_PING_INTERVAL', 'WS_PING_TIMEOUT', 'WS_CLOSE_TIMEOUT', 'WS_MAX_SIZE'],
            '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏': ['TIME_SYNC_INTERVAL', 'TIME_SERVER_SYNC_INTERVAL'],
            '–ò–º–±–∞–ª–∞–Ω—Å': ['MIN_GAP_PERCENTAGE', 'MIN_STRENGTH', 'FAIR_VALUE_GAP_ENABLED',
                         'ORDER_BLOCK_ENABLED', 'BREAKER_BLOCK_ENABLED'],
            '–°—Ç–∞–∫–∞–Ω': ['ORDERBOOK_ENABLED', 'ORDERBOOK_SNAPSHOT_ON_ALERT'],
            '–ê–ª–µ—Ä—Ç—ã': ['VOLUME_ALERTS_ENABLED', 'CONSECUTIVE_ALERTS_ENABLED', 'PRIORITY_ALERTS_ENABLED',
                       'IMBALANCE_ENABLED', 'NOTIFICATION_ENABLED', 'VOLUME_TYPE'],
            '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏': ['SOCIAL_SENTIMENT_ENABLED', 'SOCIAL_ANALYSIS_PERIOD_HOURS',
                                'SOCIAL_MIN_MENTIONS_FOR_RATING', 'SOCIAL_CACHE_DURATION_MINUTES']
        }

        for category, keys in categories.items():
            f.write(f"# {category}\n")
            for key in keys:
                if key in DEFAULT_SETTINGS:
                    f.write(f"{key}={DEFAULT_SETTINGS[key]}\n")
            f.write("\n")


def load_settings() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    global _settings_cache, _last_modified

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª
    try:
        current_modified = ENV_FILE_PATH.stat().st_mtime
        if current_modified == _last_modified and _settings_cache:
            return _settings_cache
        _last_modified = current_modified
    except FileNotFoundError:
        pass

    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not ENV_FILE_PATH.exists():
        create_env_file()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
    settings = {}

    try:
        with open(ENV_FILE_PATH, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    settings[key.strip()] = value.strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
        return DEFAULT_SETTINGS

    # –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for key, default_value in DEFAULT_SETTINGS.items():
        if key not in settings:
            settings[key] = default_value

    _settings_cache = settings
    return settings


async def reload_settings():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
        await asyncio.sleep(0.1)

        # –û—á–∏—â–∞–µ–º –∫—ç—à
        global _settings_cache
        _settings_cache = {}

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        new_settings = load_settings()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        for callback in _settings_callbacks:
            try:
                if asyncio.iscoroutinefunction(callback):
                    await callback(new_settings)
                else:
                    callback(new_settings)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ: {e}")

        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


def register_settings_callback(callback):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    _settings_callbacks.append(callback)


def unregister_settings_callback(callback):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ callback"""
    if callback in _settings_callbacks:
        _settings_callbacks.remove(callback)


def start_settings_monitor():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global _file_observer

    if not WATCHDOG_AVAILABLE:
        print("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - watchdog –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    try:
        if _file_observer is None:
            event_handler = SettingsFileHandler()
            _file_observer = Observer()
            _file_observer.schedule(event_handler, str(BASE_DIR), recursive=False)
            _file_observer.start()
            print("üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π .env —Ñ–∞–π–ª–∞ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


def stop_settings_monitor():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global _file_observer

    if not WATCHDOG_AVAILABLE:
        return

    if _file_observer:
        _file_observer.stop()
        _file_observer.join()
        _file_observer = None
        print("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π .env —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def get_setting(key: str, default: Any = None) -> Any:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings = load_settings()
    value = settings.get(key, default)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
    if isinstance(value, str):
        if value.lower() in ('true', 'false'):
            return value.lower() == 'true'
        try:
            if '.' in value:
                return float(value)
            return int(value)
        except ValueError:
            return value

    return value


def update_setting(key: str, value: Any):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ"""
    global _settings_cache

    settings = load_settings()
    settings[key] = str(value)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    _settings_cache[key] = str(value)

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º .env —Ñ–∞–π–ª
    with open(ENV_FILE_PATH, 'w', encoding='utf-8') as f:
        f.write("# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CryptoScan\n")
        f.write("# –û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n")

        for key, value in settings.items():
            if not key.startswith('#'):
                f.write(f"{key}={value}\n")

    print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {value}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
SETTINGS = load_settings()